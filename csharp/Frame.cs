// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/frame.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ObsPipe.Proto {

  /// <summary>Holder for reflection information generated from proto/frame.proto</summary>
  public static partial class FrameReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/frame.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FrameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwcm90by9mcmFtZS5wcm90bxINT2JzUGlwZS5Qcm90bxofZ29vZ2xlL3By",
            "b3RvYnVmL3RpbWVzdGFtcC5wcm90byJACglSZWN0YW5nbGUSCQoBeBgBIAEo",
            "BRIJCgF5GAIgASgFEg0KBXdpZHRoGAMgASgFEg4KBmhlaWdodBgEIAEoBSLr",
            "AgoFRnJhbWUSCgoCaWQYASABKAUSLAoIcmVuZGVyZWQYAiABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEi0KCWdlbmVyYXRlZBgDIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASDQoFd2lkdGgYBCABKAUSDgoGaGVp",
            "Z2h0GAUgASgFEgsKA2JwcBgGIAEoBRIwCgxpbWFnZV9mb3JtYXQYByABKA4y",
            "Gi5PYnNQaXBlLlByb3RvLkltYWdlRm9ybWF0EjAKDHBpeGVsX2Zvcm1hdBgI",
            "IAEoDjIaLk9ic1BpcGUuUHJvdG8uUGl4ZWxGb3JtYXQSLwoLY29tcHJlc3Np",
            "b24YCSABKA4yGi5PYnNQaXBlLlByb3RvLkNvbXByZXNzaW9uEigKBnJlZ2lv",
            "bhgKIAEoCzIYLk9ic1BpcGUuUHJvdG8uUmVjdGFuZ2xlEg4KBmJ1ZmZlchhk",
            "IAEoDCpPCgtJbWFnZUZvcm1hdBIHCgNSYXcQABIHCgNCbXAQARIICgRKcGVn",
            "EAISBwoDUG5nEAMSBwoDVGdhEAQSCAoEVGlmZhAFEggKBFdlYnAQBiohCgtQ",
            "aXhlbEZvcm1hdBIICgRSR0JBEAASCAoEQkdSQRABKiEKC0NvbXByZXNzaW9u",
            "EggKBE5vbmUQABIICgRaTGliEAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ObsPipe.Proto.ImageFormat), typeof(global::ObsPipe.Proto.PixelFormat), typeof(global::ObsPipe.Proto.Compression), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ObsPipe.Proto.Rectangle), global::ObsPipe.Proto.Rectangle.Parser, new[]{ "X", "Y", "Width", "Height" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ObsPipe.Proto.Frame), global::ObsPipe.Proto.Frame.Parser, new[]{ "Id", "Rendered", "Generated", "Width", "Height", "Bpp", "ImageFormat", "PixelFormat", "Compression", "Region", "Buffer" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ImageFormat {
    [pbr::OriginalName("Raw")] Raw = 0,
    [pbr::OriginalName("Bmp")] Bmp = 1,
    [pbr::OriginalName("Jpeg")] Jpeg = 2,
    [pbr::OriginalName("Png")] Png = 3,
    [pbr::OriginalName("Tga")] Tga = 4,
    [pbr::OriginalName("Tiff")] Tiff = 5,
    [pbr::OriginalName("Webp")] Webp = 6,
  }

  public enum PixelFormat {
    [pbr::OriginalName("RGBA")] Rgba = 0,
    [pbr::OriginalName("BGRA")] Bgra = 1,
  }

  public enum Compression {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("ZLib")] Zlib = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Rectangle : pb::IMessage<Rectangle> {
    private static readonly pb::MessageParser<Rectangle> _parser = new pb::MessageParser<Rectangle>(() => new Rectangle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rectangle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ObsPipe.Proto.FrameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rectangle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rectangle(Rectangle other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      width_ = other.width_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rectangle Clone() {
      return new Rectangle(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rectangle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rectangle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rectangle other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Frame : pb::IMessage<Frame> {
    private static readonly pb::MessageParser<Frame> _parser = new pb::MessageParser<Frame>(() => new Frame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Frame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ObsPipe.Proto.FrameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame(Frame other) : this() {
      id_ = other.id_;
      rendered_ = other.rendered_ != null ? other.rendered_.Clone() : null;
      generated_ = other.generated_ != null ? other.generated_.Clone() : null;
      width_ = other.width_;
      height_ = other.height_;
      bpp_ = other.bpp_;
      imageFormat_ = other.imageFormat_;
      pixelFormat_ = other.pixelFormat_;
      compression_ = other.compression_;
      region_ = other.region_ != null ? other.region_.Clone() : null;
      buffer_ = other.buffer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame Clone() {
      return new Frame(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// Frame id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "rendered" field.</summary>
    public const int RenderedFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp rendered_;
    /// <summary>
    /// Time when frame was rendered
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Rendered {
      get { return rendered_; }
      set {
        rendered_ = value;
      }
    }

    /// <summary>Field number for the "generated" field.</summary>
    public const int GeneratedFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp generated_;
    /// <summary>
    /// Time when frame was prepared to be sent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Generated {
      get { return generated_; }
      set {
        generated_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 4;
    private int width_;
    /// <summary>
    /// Frame width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 5;
    private int height_;
    /// <summary>
    /// Frame height
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "bpp" field.</summary>
    public const int BppFieldNumber = 6;
    private int bpp_;
    /// <summary>
    /// Frame bits per pixel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bpp {
      get { return bpp_; }
      set {
        bpp_ = value;
      }
    }

    /// <summary>Field number for the "image_format" field.</summary>
    public const int ImageFormatFieldNumber = 7;
    private global::ObsPipe.Proto.ImageFormat imageFormat_ = global::ObsPipe.Proto.ImageFormat.Raw;
    /// <summary>
    /// Frame image format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ObsPipe.Proto.ImageFormat ImageFormat {
      get { return imageFormat_; }
      set {
        imageFormat_ = value;
      }
    }

    /// <summary>Field number for the "pixel_format" field.</summary>
    public const int PixelFormatFieldNumber = 8;
    private global::ObsPipe.Proto.PixelFormat pixelFormat_ = global::ObsPipe.Proto.PixelFormat.Rgba;
    /// <summary>
    /// Frame pixel format (only used when image format is Raw)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ObsPipe.Proto.PixelFormat PixelFormat {
      get { return pixelFormat_; }
      set {
        pixelFormat_ = value;
      }
    }

    /// <summary>Field number for the "compression" field.</summary>
    public const int CompressionFieldNumber = 9;
    private global::ObsPipe.Proto.Compression compression_ = global::ObsPipe.Proto.Compression.None;
    /// <summary>
    /// Frame pixel compression (only used when image format is Raw)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ObsPipe.Proto.Compression Compression {
      get { return compression_; }
      set {
        compression_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 10;
    private global::ObsPipe.Proto.Rectangle region_;
    /// <summary>
    /// Region that was updated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ObsPipe.Proto.Rectangle Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "buffer" field.</summary>
    public const int BufferFieldNumber = 100;
    private pb::ByteString buffer_ = pb::ByteString.Empty;
    /// <summary>
    /// Image/Pixel data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Buffer {
      get { return buffer_; }
      set {
        buffer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Frame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Frame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Rendered, other.Rendered)) return false;
      if (!object.Equals(Generated, other.Generated)) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Bpp != other.Bpp) return false;
      if (ImageFormat != other.ImageFormat) return false;
      if (PixelFormat != other.PixelFormat) return false;
      if (Compression != other.Compression) return false;
      if (!object.Equals(Region, other.Region)) return false;
      if (Buffer != other.Buffer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (rendered_ != null) hash ^= Rendered.GetHashCode();
      if (generated_ != null) hash ^= Generated.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Bpp != 0) hash ^= Bpp.GetHashCode();
      if (ImageFormat != global::ObsPipe.Proto.ImageFormat.Raw) hash ^= ImageFormat.GetHashCode();
      if (PixelFormat != global::ObsPipe.Proto.PixelFormat.Rgba) hash ^= PixelFormat.GetHashCode();
      if (Compression != global::ObsPipe.Proto.Compression.None) hash ^= Compression.GetHashCode();
      if (region_ != null) hash ^= Region.GetHashCode();
      if (Buffer.Length != 0) hash ^= Buffer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (rendered_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rendered);
      }
      if (generated_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Generated);
      }
      if (Width != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Height);
      }
      if (Bpp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Bpp);
      }
      if (ImageFormat != global::ObsPipe.Proto.ImageFormat.Raw) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ImageFormat);
      }
      if (PixelFormat != global::ObsPipe.Proto.PixelFormat.Rgba) {
        output.WriteRawTag(64);
        output.WriteEnum((int) PixelFormat);
      }
      if (Compression != global::ObsPipe.Proto.Compression.None) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Compression);
      }
      if (region_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Region);
      }
      if (Buffer.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteBytes(Buffer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (rendered_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rendered);
      }
      if (generated_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Generated);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Bpp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bpp);
      }
      if (ImageFormat != global::ObsPipe.Proto.ImageFormat.Raw) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ImageFormat);
      }
      if (PixelFormat != global::ObsPipe.Proto.PixelFormat.Rgba) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PixelFormat);
      }
      if (Compression != global::ObsPipe.Proto.Compression.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Compression);
      }
      if (region_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Region);
      }
      if (Buffer.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Buffer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Frame other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.rendered_ != null) {
        if (rendered_ == null) {
          Rendered = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Rendered.MergeFrom(other.Rendered);
      }
      if (other.generated_ != null) {
        if (generated_ == null) {
          Generated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Generated.MergeFrom(other.Generated);
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Bpp != 0) {
        Bpp = other.Bpp;
      }
      if (other.ImageFormat != global::ObsPipe.Proto.ImageFormat.Raw) {
        ImageFormat = other.ImageFormat;
      }
      if (other.PixelFormat != global::ObsPipe.Proto.PixelFormat.Rgba) {
        PixelFormat = other.PixelFormat;
      }
      if (other.Compression != global::ObsPipe.Proto.Compression.None) {
        Compression = other.Compression;
      }
      if (other.region_ != null) {
        if (region_ == null) {
          Region = new global::ObsPipe.Proto.Rectangle();
        }
        Region.MergeFrom(other.Region);
      }
      if (other.Buffer.Length != 0) {
        Buffer = other.Buffer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (rendered_ == null) {
              Rendered = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Rendered);
            break;
          }
          case 26: {
            if (generated_ == null) {
              Generated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Generated);
            break;
          }
          case 32: {
            Width = input.ReadInt32();
            break;
          }
          case 40: {
            Height = input.ReadInt32();
            break;
          }
          case 48: {
            Bpp = input.ReadInt32();
            break;
          }
          case 56: {
            ImageFormat = (global::ObsPipe.Proto.ImageFormat) input.ReadEnum();
            break;
          }
          case 64: {
            PixelFormat = (global::ObsPipe.Proto.PixelFormat) input.ReadEnum();
            break;
          }
          case 72: {
            Compression = (global::ObsPipe.Proto.Compression) input.ReadEnum();
            break;
          }
          case 82: {
            if (region_ == null) {
              Region = new global::ObsPipe.Proto.Rectangle();
            }
            input.ReadMessage(Region);
            break;
          }
          case 802: {
            Buffer = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
