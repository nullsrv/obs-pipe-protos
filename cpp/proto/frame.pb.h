// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/frame.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fframe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fframe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fframe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fframe_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fframe_2eproto;
namespace ObsPipe {
namespace Proto {
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Rectangle;
class RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
}  // namespace Proto
}  // namespace ObsPipe
PROTOBUF_NAMESPACE_OPEN
template<> ::ObsPipe::Proto::Frame* Arena::CreateMaybeMessage<::ObsPipe::Proto::Frame>(Arena*);
template<> ::ObsPipe::Proto::Rectangle* Arena::CreateMaybeMessage<::ObsPipe::Proto::Rectangle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ObsPipe {
namespace Proto {

enum ImageFormat : int {
  Raw = 0,
  Bmp = 1,
  Jpeg = 2,
  Png = 3,
  Tga = 4,
  Tiff = 5,
  Webp = 6,
  ImageFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImageFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImageFormat_IsValid(int value);
constexpr ImageFormat ImageFormat_MIN = Raw;
constexpr ImageFormat ImageFormat_MAX = Webp;
constexpr int ImageFormat_ARRAYSIZE = ImageFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_descriptor();
template<typename T>
inline const std::string& ImageFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageFormat_descriptor(), enum_t_value);
}
inline bool ImageFormat_Parse(
    const std::string& name, ImageFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageFormat>(
    ImageFormat_descriptor(), name, value);
}
enum PixelFormat : int {
  RGBA = 0,
  BGRA = 1,
  PixelFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PixelFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PixelFormat_IsValid(int value);
constexpr PixelFormat PixelFormat_MIN = RGBA;
constexpr PixelFormat PixelFormat_MAX = BGRA;
constexpr int PixelFormat_ARRAYSIZE = PixelFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PixelFormat_descriptor();
template<typename T>
inline const std::string& PixelFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PixelFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PixelFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PixelFormat_descriptor(), enum_t_value);
}
inline bool PixelFormat_Parse(
    const std::string& name, PixelFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PixelFormat>(
    PixelFormat_descriptor(), name, value);
}
enum Compression : int {
  None = 0,
  ZLib = 1,
  Compression_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Compression_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Compression_IsValid(int value);
constexpr Compression Compression_MIN = None;
constexpr Compression Compression_MAX = ZLib;
constexpr int Compression_ARRAYSIZE = Compression_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compression_descriptor();
template<typename T>
inline const std::string& Compression_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Compression>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Compression_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Compression_descriptor(), enum_t_value);
}
inline bool Compression_Parse(
    const std::string& name, Compression* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Compression>(
    Compression_descriptor(), name, value);
}
// ===================================================================

class Rectangle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ObsPipe.Proto.Rectangle) */ {
 public:
  Rectangle();
  virtual ~Rectangle();

  Rectangle(const Rectangle& from);
  Rectangle(Rectangle&& from) noexcept
    : Rectangle() {
    *this = ::std::move(from);
  }

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rectangle& operator=(Rectangle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rectangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Rectangle& a, Rectangle& b) {
    a.Swap(&b);
  }
  inline void Swap(Rectangle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rectangle* New() const final {
    return CreateMaybeMessage<Rectangle>(nullptr);
  }

  Rectangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rectangle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rectangle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ObsPipe.Proto.Rectangle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fframe_2eproto);
    return ::descriptor_table_proto_2fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 4;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ObsPipe.Proto.Rectangle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fframe_2eproto;
};
// -------------------------------------------------------------------

class Frame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ObsPipe.Proto.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ObsPipe.Proto.Frame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fframe_2eproto);
    return ::descriptor_table_proto_2fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 100,
    kRenderedFieldNumber = 2,
    kGeneratedFieldNumber = 3,
    kRegionFieldNumber = 10,
    kIdFieldNumber = 1,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kBppFieldNumber = 6,
    kImageFormatFieldNumber = 7,
    kPixelFormatFieldNumber = 8,
    kCompressionFieldNumber = 9,
  };
  // bytes buffer = 100;
  void clear_buffer();
  const std::string& buffer() const;
  void set_buffer(const std::string& value);
  void set_buffer(std::string&& value);
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  std::string* mutable_buffer();
  std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // .google.protobuf.Timestamp rendered = 2;
  bool has_rendered() const;
  private:
  bool _internal_has_rendered() const;
  public:
  void clear_rendered();
  const PROTOBUF_NAMESPACE_ID::Timestamp& rendered() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_rendered();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_rendered();
  void set_allocated_rendered(PROTOBUF_NAMESPACE_ID::Timestamp* rendered);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_rendered() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_rendered();
  public:

  // .google.protobuf.Timestamp generated = 3;
  bool has_generated() const;
  private:
  bool _internal_has_generated() const;
  public:
  void clear_generated();
  const PROTOBUF_NAMESPACE_ID::Timestamp& generated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_generated();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_generated();
  void set_allocated_generated(PROTOBUF_NAMESPACE_ID::Timestamp* generated);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_generated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_generated();
  public:

  // .ObsPipe.Proto.Rectangle region = 10;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  const ::ObsPipe::Proto::Rectangle& region() const;
  ::ObsPipe::Proto::Rectangle* release_region();
  ::ObsPipe::Proto::Rectangle* mutable_region();
  void set_allocated_region(::ObsPipe::Proto::Rectangle* region);
  private:
  const ::ObsPipe::Proto::Rectangle& _internal_region() const;
  ::ObsPipe::Proto::Rectangle* _internal_mutable_region();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 4;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 5;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bpp = 6;
  void clear_bpp();
  ::PROTOBUF_NAMESPACE_ID::int32 bpp() const;
  void set_bpp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bpp() const;
  void _internal_set_bpp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .ObsPipe.Proto.ImageFormat image_format = 7;
  void clear_image_format();
  ::ObsPipe::Proto::ImageFormat image_format() const;
  void set_image_format(::ObsPipe::Proto::ImageFormat value);
  private:
  ::ObsPipe::Proto::ImageFormat _internal_image_format() const;
  void _internal_set_image_format(::ObsPipe::Proto::ImageFormat value);
  public:

  // .ObsPipe.Proto.PixelFormat pixel_format = 8;
  void clear_pixel_format();
  ::ObsPipe::Proto::PixelFormat pixel_format() const;
  void set_pixel_format(::ObsPipe::Proto::PixelFormat value);
  private:
  ::ObsPipe::Proto::PixelFormat _internal_pixel_format() const;
  void _internal_set_pixel_format(::ObsPipe::Proto::PixelFormat value);
  public:

  // .ObsPipe.Proto.Compression compression = 9;
  void clear_compression();
  ::ObsPipe::Proto::Compression compression() const;
  void set_compression(::ObsPipe::Proto::Compression value);
  private:
  ::ObsPipe::Proto::Compression _internal_compression() const;
  void _internal_set_compression(::ObsPipe::Proto::Compression value);
  public:

  // @@protoc_insertion_point(class_scope:ObsPipe.Proto.Frame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  PROTOBUF_NAMESPACE_ID::Timestamp* rendered_;
  PROTOBUF_NAMESPACE_ID::Timestamp* generated_;
  ::ObsPipe::Proto::Rectangle* region_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 bpp_;
  int image_format_;
  int pixel_format_;
  int compression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fframe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Rectangle

// int32 x = 1;
inline void Rectangle::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::x() const {
  // @@protoc_insertion_point(field_get:ObsPipe.Proto.Rectangle.x)
  return _internal_x();
}
inline void Rectangle::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Rectangle::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ObsPipe.Proto.Rectangle.x)
}

// int32 y = 2;
inline void Rectangle::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::y() const {
  // @@protoc_insertion_point(field_get:ObsPipe.Proto.Rectangle.y)
  return _internal_y();
}
inline void Rectangle::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Rectangle::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ObsPipe.Proto.Rectangle.y)
}

// int32 width = 3;
inline void Rectangle::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::width() const {
  // @@protoc_insertion_point(field_get:ObsPipe.Proto.Rectangle.width)
  return _internal_width();
}
inline void Rectangle::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Rectangle::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ObsPipe.Proto.Rectangle.width)
}

// int32 height = 4;
inline void Rectangle::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::height() const {
  // @@protoc_insertion_point(field_get:ObsPipe.Proto.Rectangle.height)
  return _internal_height();
}
inline void Rectangle::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Rectangle::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ObsPipe.Proto.Rectangle.height)
}

// -------------------------------------------------------------------

// Frame

// int32 id = 1;
inline void Frame::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::id() const {
  // @@protoc_insertion_point(field_get:ObsPipe.Proto.Frame.id)
  return _internal_id();
}
inline void Frame::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Frame::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ObsPipe.Proto.Frame.id)
}

// .google.protobuf.Timestamp rendered = 2;
inline bool Frame::_internal_has_rendered() const {
  return this != internal_default_instance() && rendered_ != nullptr;
}
inline bool Frame::has_rendered() const {
  return _internal_has_rendered();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Frame::_internal_rendered() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = rendered_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Frame::rendered() const {
  // @@protoc_insertion_point(field_get:ObsPipe.Proto.Frame.rendered)
  return _internal_rendered();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Frame::release_rendered() {
  // @@protoc_insertion_point(field_release:ObsPipe.Proto.Frame.rendered)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = rendered_;
  rendered_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Frame::_internal_mutable_rendered() {
  
  if (rendered_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    rendered_ = p;
  }
  return rendered_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Frame::mutable_rendered() {
  // @@protoc_insertion_point(field_mutable:ObsPipe.Proto.Frame.rendered)
  return _internal_mutable_rendered();
}
inline void Frame::set_allocated_rendered(PROTOBUF_NAMESPACE_ID::Timestamp* rendered) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rendered_);
  }
  if (rendered) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rendered)->GetArena();
    if (message_arena != submessage_arena) {
      rendered = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rendered, submessage_arena);
    }
    
  } else {
    
  }
  rendered_ = rendered;
  // @@protoc_insertion_point(field_set_allocated:ObsPipe.Proto.Frame.rendered)
}

// .google.protobuf.Timestamp generated = 3;
inline bool Frame::_internal_has_generated() const {
  return this != internal_default_instance() && generated_ != nullptr;
}
inline bool Frame::has_generated() const {
  return _internal_has_generated();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Frame::_internal_generated() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = generated_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Frame::generated() const {
  // @@protoc_insertion_point(field_get:ObsPipe.Proto.Frame.generated)
  return _internal_generated();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Frame::release_generated() {
  // @@protoc_insertion_point(field_release:ObsPipe.Proto.Frame.generated)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = generated_;
  generated_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Frame::_internal_mutable_generated() {
  
  if (generated_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    generated_ = p;
  }
  return generated_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Frame::mutable_generated() {
  // @@protoc_insertion_point(field_mutable:ObsPipe.Proto.Frame.generated)
  return _internal_mutable_generated();
}
inline void Frame::set_allocated_generated(PROTOBUF_NAMESPACE_ID::Timestamp* generated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(generated_);
  }
  if (generated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generated)->GetArena();
    if (message_arena != submessage_arena) {
      generated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generated, submessage_arena);
    }
    
  } else {
    
  }
  generated_ = generated;
  // @@protoc_insertion_point(field_set_allocated:ObsPipe.Proto.Frame.generated)
}

// int32 width = 4;
inline void Frame::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::width() const {
  // @@protoc_insertion_point(field_get:ObsPipe.Proto.Frame.width)
  return _internal_width();
}
inline void Frame::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Frame::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ObsPipe.Proto.Frame.width)
}

// int32 height = 5;
inline void Frame::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::height() const {
  // @@protoc_insertion_point(field_get:ObsPipe.Proto.Frame.height)
  return _internal_height();
}
inline void Frame::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Frame::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ObsPipe.Proto.Frame.height)
}

// int32 bpp = 6;
inline void Frame::clear_bpp() {
  bpp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::_internal_bpp() const {
  return bpp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::bpp() const {
  // @@protoc_insertion_point(field_get:ObsPipe.Proto.Frame.bpp)
  return _internal_bpp();
}
inline void Frame::_internal_set_bpp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bpp_ = value;
}
inline void Frame::set_bpp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bpp(value);
  // @@protoc_insertion_point(field_set:ObsPipe.Proto.Frame.bpp)
}

// .ObsPipe.Proto.ImageFormat image_format = 7;
inline void Frame::clear_image_format() {
  image_format_ = 0;
}
inline ::ObsPipe::Proto::ImageFormat Frame::_internal_image_format() const {
  return static_cast< ::ObsPipe::Proto::ImageFormat >(image_format_);
}
inline ::ObsPipe::Proto::ImageFormat Frame::image_format() const {
  // @@protoc_insertion_point(field_get:ObsPipe.Proto.Frame.image_format)
  return _internal_image_format();
}
inline void Frame::_internal_set_image_format(::ObsPipe::Proto::ImageFormat value) {
  
  image_format_ = value;
}
inline void Frame::set_image_format(::ObsPipe::Proto::ImageFormat value) {
  _internal_set_image_format(value);
  // @@protoc_insertion_point(field_set:ObsPipe.Proto.Frame.image_format)
}

// .ObsPipe.Proto.PixelFormat pixel_format = 8;
inline void Frame::clear_pixel_format() {
  pixel_format_ = 0;
}
inline ::ObsPipe::Proto::PixelFormat Frame::_internal_pixel_format() const {
  return static_cast< ::ObsPipe::Proto::PixelFormat >(pixel_format_);
}
inline ::ObsPipe::Proto::PixelFormat Frame::pixel_format() const {
  // @@protoc_insertion_point(field_get:ObsPipe.Proto.Frame.pixel_format)
  return _internal_pixel_format();
}
inline void Frame::_internal_set_pixel_format(::ObsPipe::Proto::PixelFormat value) {
  
  pixel_format_ = value;
}
inline void Frame::set_pixel_format(::ObsPipe::Proto::PixelFormat value) {
  _internal_set_pixel_format(value);
  // @@protoc_insertion_point(field_set:ObsPipe.Proto.Frame.pixel_format)
}

// .ObsPipe.Proto.Compression compression = 9;
inline void Frame::clear_compression() {
  compression_ = 0;
}
inline ::ObsPipe::Proto::Compression Frame::_internal_compression() const {
  return static_cast< ::ObsPipe::Proto::Compression >(compression_);
}
inline ::ObsPipe::Proto::Compression Frame::compression() const {
  // @@protoc_insertion_point(field_get:ObsPipe.Proto.Frame.compression)
  return _internal_compression();
}
inline void Frame::_internal_set_compression(::ObsPipe::Proto::Compression value) {
  
  compression_ = value;
}
inline void Frame::set_compression(::ObsPipe::Proto::Compression value) {
  _internal_set_compression(value);
  // @@protoc_insertion_point(field_set:ObsPipe.Proto.Frame.compression)
}

// .ObsPipe.Proto.Rectangle region = 10;
inline bool Frame::_internal_has_region() const {
  return this != internal_default_instance() && region_ != nullptr;
}
inline bool Frame::has_region() const {
  return _internal_has_region();
}
inline void Frame::clear_region() {
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
}
inline const ::ObsPipe::Proto::Rectangle& Frame::_internal_region() const {
  const ::ObsPipe::Proto::Rectangle* p = region_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ObsPipe::Proto::Rectangle*>(
      &::ObsPipe::Proto::_Rectangle_default_instance_);
}
inline const ::ObsPipe::Proto::Rectangle& Frame::region() const {
  // @@protoc_insertion_point(field_get:ObsPipe.Proto.Frame.region)
  return _internal_region();
}
inline ::ObsPipe::Proto::Rectangle* Frame::release_region() {
  // @@protoc_insertion_point(field_release:ObsPipe.Proto.Frame.region)
  
  ::ObsPipe::Proto::Rectangle* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::ObsPipe::Proto::Rectangle* Frame::_internal_mutable_region() {
  
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::ObsPipe::Proto::Rectangle>(GetArenaNoVirtual());
    region_ = p;
  }
  return region_;
}
inline ::ObsPipe::Proto::Rectangle* Frame::mutable_region() {
  // @@protoc_insertion_point(field_mutable:ObsPipe.Proto.Frame.region)
  return _internal_mutable_region();
}
inline void Frame::set_allocated_region(::ObsPipe::Proto::Rectangle* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete region_;
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:ObsPipe.Proto.Frame.region)
}

// bytes buffer = 100;
inline void Frame::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Frame::buffer() const {
  // @@protoc_insertion_point(field_get:ObsPipe.Proto.Frame.buffer)
  return _internal_buffer();
}
inline void Frame::set_buffer(const std::string& value) {
  _internal_set_buffer(value);
  // @@protoc_insertion_point(field_set:ObsPipe.Proto.Frame.buffer)
}
inline std::string* Frame::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable:ObsPipe.Proto.Frame.buffer)
  return _internal_mutable_buffer();
}
inline const std::string& Frame::_internal_buffer() const {
  return buffer_.GetNoArena();
}
inline void Frame::_internal_set_buffer(const std::string& value) {
  
  buffer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Frame::set_buffer(std::string&& value) {
  
  buffer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ObsPipe.Proto.Frame.buffer)
}
inline void Frame::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buffer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ObsPipe.Proto.Frame.buffer)
}
inline void Frame::set_buffer(const void* value, size_t size) {
  
  buffer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ObsPipe.Proto.Frame.buffer)
}
inline std::string* Frame::_internal_mutable_buffer() {
  
  return buffer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Frame::release_buffer() {
  // @@protoc_insertion_point(field_release:ObsPipe.Proto.Frame.buffer)
  
  return buffer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Frame::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:ObsPipe.Proto.Frame.buffer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace ObsPipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ObsPipe::Proto::ImageFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ObsPipe::Proto::ImageFormat>() {
  return ::ObsPipe::Proto::ImageFormat_descriptor();
}
template <> struct is_proto_enum< ::ObsPipe::Proto::PixelFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ObsPipe::Proto::PixelFormat>() {
  return ::ObsPipe::Proto::PixelFormat_descriptor();
}
template <> struct is_proto_enum< ::ObsPipe::Proto::Compression> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ObsPipe::Proto::Compression>() {
  return ::ObsPipe::Proto::Compression_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fframe_2eproto
