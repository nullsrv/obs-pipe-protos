// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/frame.proto

#include "proto/frame.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fframe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rectangle_proto_2fframe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace ObsPipe {
namespace Proto {
class RectangleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rectangle> _instance;
} _Rectangle_default_instance_;
class FrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Frame> _instance;
} _Frame_default_instance_;
}  // namespace Proto
}  // namespace ObsPipe
static void InitDefaultsscc_info_Frame_proto_2fframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ObsPipe::Proto::_Frame_default_instance_;
    new (ptr) ::ObsPipe::Proto::Frame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ObsPipe::Proto::Frame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Frame_proto_2fframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Frame_proto_2fframe_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Rectangle_proto_2fframe_2eproto.base,}};

static void InitDefaultsscc_info_Rectangle_proto_2fframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ObsPipe::Proto::_Rectangle_default_instance_;
    new (ptr) ::ObsPipe::Proto::Rectangle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ObsPipe::Proto::Rectangle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rectangle_proto_2fframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rectangle_proto_2fframe_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fframe_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fframe_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fframe_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fframe_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Rectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Rectangle, x_),
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Rectangle, y_),
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Rectangle, width_),
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Rectangle, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Frame, id_),
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Frame, rendered_),
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Frame, generated_),
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Frame, width_),
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Frame, height_),
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Frame, bpp_),
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Frame, image_format_),
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Frame, pixel_format_),
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Frame, compression_),
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Frame, region_),
  PROTOBUF_FIELD_OFFSET(::ObsPipe::Proto::Frame, buffer_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ObsPipe::Proto::Rectangle)},
  { 9, -1, sizeof(::ObsPipe::Proto::Frame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ObsPipe::Proto::_Rectangle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ObsPipe::Proto::_Frame_default_instance_),
};

const char descriptor_table_protodef_proto_2fframe_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021proto/frame.proto\022\rObsPipe.Proto\032\037goog"
  "le/protobuf/timestamp.proto\"@\n\tRectangle"
  "\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005width\030\003 \001(\005\022\016\n"
  "\006height\030\004 \001(\005\"\353\002\n\005Frame\022\n\n\002id\030\001 \001(\005\022,\n\010r"
  "endered\030\002 \001(\0132\032.google.protobuf.Timestam"
  "p\022-\n\tgenerated\030\003 \001(\0132\032.google.protobuf.T"
  "imestamp\022\r\n\005width\030\004 \001(\005\022\016\n\006height\030\005 \001(\005\022"
  "\013\n\003bpp\030\006 \001(\005\0220\n\014image_format\030\007 \001(\0162\032.Obs"
  "Pipe.Proto.ImageFormat\0220\n\014pixel_format\030\010"
  " \001(\0162\032.ObsPipe.Proto.PixelFormat\022/\n\013comp"
  "ression\030\t \001(\0162\032.ObsPipe.Proto.Compressio"
  "n\022(\n\006region\030\n \001(\0132\030.ObsPipe.Proto.Rectan"
  "gle\022\016\n\006buffer\030d \001(\014*O\n\013ImageFormat\022\007\n\003Ra"
  "w\020\000\022\007\n\003Bmp\020\001\022\010\n\004Jpeg\020\002\022\007\n\003Png\020\003\022\007\n\003Tga\020\004"
  "\022\010\n\004Tiff\020\005\022\010\n\004Webp\020\006*!\n\013PixelFormat\022\010\n\004R"
  "GBA\020\000\022\010\n\004BGRA\020\001*!\n\013Compression\022\010\n\004None\020\000"
  "\022\010\n\004ZLib\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fframe_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fframe_2eproto_sccs[2] = {
  &scc_info_Frame_proto_2fframe_2eproto.base,
  &scc_info_Rectangle_proto_2fframe_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fframe_2eproto_once;
static bool descriptor_table_proto_2fframe_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fframe_2eproto = {
  &descriptor_table_proto_2fframe_2eproto_initialized, descriptor_table_protodef_proto_2fframe_2eproto, "proto/frame.proto", 658,
  &descriptor_table_proto_2fframe_2eproto_once, descriptor_table_proto_2fframe_2eproto_sccs, descriptor_table_proto_2fframe_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_proto_2fframe_2eproto::offsets,
  file_level_metadata_proto_2fframe_2eproto, 2, file_level_enum_descriptors_proto_2fframe_2eproto, file_level_service_descriptors_proto_2fframe_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fframe_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fframe_2eproto), true);
namespace ObsPipe {
namespace Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fframe_2eproto);
  return file_level_enum_descriptors_proto_2fframe_2eproto[0];
}
bool ImageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PixelFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fframe_2eproto);
  return file_level_enum_descriptors_proto_2fframe_2eproto[1];
}
bool PixelFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compression_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fframe_2eproto);
  return file_level_enum_descriptors_proto_2fframe_2eproto[2];
}
bool Compression_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Rectangle::InitAsDefaultInstance() {
}
class Rectangle::_Internal {
 public:
};

Rectangle::Rectangle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ObsPipe.Proto.Rectangle)
}
Rectangle::Rectangle(const Rectangle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:ObsPipe.Proto.Rectangle)
}

void Rectangle::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:ObsPipe.Proto.Rectangle)
  SharedDtor();
}

void Rectangle::SharedDtor() {
}

void Rectangle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rectangle& Rectangle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rectangle_proto_2fframe_2eproto.base);
  return *internal_default_instance();
}


void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:ObsPipe.Proto.Rectangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

const char* Rectangle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rectangle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObsPipe.Proto.Rectangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObsPipe.Proto.Rectangle)
  return target;
}

size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ObsPipe.Proto.Rectangle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rectangle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ObsPipe.Proto.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  const Rectangle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rectangle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ObsPipe.Proto.Rectangle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ObsPipe.Proto.Rectangle)
    MergeFrom(*source);
  }
}

void Rectangle::MergeFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ObsPipe.Proto.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void Rectangle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ObsPipe.Proto.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ObsPipe.Proto.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  return true;
}

void Rectangle::InternalSwap(Rectangle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rectangle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Frame::InitAsDefaultInstance() {
  ::ObsPipe::Proto::_Frame_default_instance_._instance.get_mutable()->rendered_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::ObsPipe::Proto::_Frame_default_instance_._instance.get_mutable()->generated_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::ObsPipe::Proto::_Frame_default_instance_._instance.get_mutable()->region_ = const_cast< ::ObsPipe::Proto::Rectangle*>(
      ::ObsPipe::Proto::Rectangle::internal_default_instance());
}
class Frame::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& rendered(const Frame* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& generated(const Frame* msg);
  static const ::ObsPipe::Proto::Rectangle& region(const Frame* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Frame::_Internal::rendered(const Frame* msg) {
  return *msg->rendered_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Frame::_Internal::generated(const Frame* msg) {
  return *msg->generated_;
}
const ::ObsPipe::Proto::Rectangle&
Frame::_Internal::region(const Frame* msg) {
  return *msg->region_;
}
void Frame::clear_rendered() {
  if (GetArenaNoVirtual() == nullptr && rendered_ != nullptr) {
    delete rendered_;
  }
  rendered_ = nullptr;
}
void Frame::clear_generated() {
  if (GetArenaNoVirtual() == nullptr && generated_ != nullptr) {
    delete generated_;
  }
  generated_ = nullptr;
}
Frame::Frame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ObsPipe.Proto.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buffer().empty()) {
    buffer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  if (from._internal_has_rendered()) {
    rendered_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.rendered_);
  } else {
    rendered_ = nullptr;
  }
  if (from._internal_has_generated()) {
    generated_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.generated_);
  } else {
    generated_ = nullptr;
  }
  if (from._internal_has_region()) {
    region_ = new ::ObsPipe::Proto::Rectangle(*from.region_);
  } else {
    region_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&compression_) -
    reinterpret_cast<char*>(&id_)) + sizeof(compression_));
  // @@protoc_insertion_point(copy_constructor:ObsPipe.Proto.Frame)
}

void Frame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Frame_proto_2fframe_2eproto.base);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rendered_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compression_) -
      reinterpret_cast<char*>(&rendered_)) + sizeof(compression_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:ObsPipe.Proto.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rendered_;
  if (this != internal_default_instance()) delete generated_;
  if (this != internal_default_instance()) delete region_;
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Frame& Frame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Frame_proto_2fframe_2eproto.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:ObsPipe.Proto.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && rendered_ != nullptr) {
    delete rendered_;
  }
  rendered_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && generated_ != nullptr) {
    delete generated_;
  }
  generated_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compression_) -
      reinterpret_cast<char*>(&id_)) + sizeof(compression_));
  _internal_metadata_.Clear();
}

const char* Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp rendered = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rendered(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp generated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_generated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bpp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bpp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ObsPipe.Proto.ImageFormat image_format = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_image_format(static_cast<::ObsPipe::Proto::ImageFormat>(val));
        } else goto handle_unusual;
        continue;
      // .ObsPipe.Proto.PixelFormat pixel_format = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_pixel_format(static_cast<::ObsPipe::Proto::PixelFormat>(val));
        } else goto handle_unusual;
        continue;
      // .ObsPipe.Proto.Compression compression = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_compression(static_cast<::ObsPipe::Proto::Compression>(val));
        } else goto handle_unusual;
        continue;
      // .ObsPipe.Proto.Rectangle region = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes buffer = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Frame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObsPipe.Proto.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp rendered = 2;
  if (this->has_rendered()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rendered(this), target, stream);
  }

  // .google.protobuf.Timestamp generated = 3;
  if (this->has_generated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::generated(this), target, stream);
  }

  // int32 width = 4;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_width(), target);
  }

  // int32 height = 5;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_height(), target);
  }

  // int32 bpp = 6;
  if (this->bpp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_bpp(), target);
  }

  // .ObsPipe.Proto.ImageFormat image_format = 7;
  if (this->image_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_image_format(), target);
  }

  // .ObsPipe.Proto.PixelFormat pixel_format = 8;
  if (this->pixel_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_pixel_format(), target);
  }

  // .ObsPipe.Proto.Compression compression = 9;
  if (this->compression() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_compression(), target);
  }

  // .ObsPipe.Proto.Rectangle region = 10;
  if (this->has_region()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::region(this), target, stream);
  }

  // bytes buffer = 100;
  if (this->buffer().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        100, this->_internal_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObsPipe.Proto.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ObsPipe.Proto.Frame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buffer = 100;
  if (this->buffer().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  // .google.protobuf.Timestamp rendered = 2;
  if (this->has_rendered()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rendered_);
  }

  // .google.protobuf.Timestamp generated = 3;
  if (this->has_generated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *generated_);
  }

  // .ObsPipe.Proto.Rectangle region = 10;
  if (this->has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 width = 4;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 5;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 bpp = 6;
  if (this->bpp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bpp());
  }

  // .ObsPipe.Proto.ImageFormat image_format = 7;
  if (this->image_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_image_format());
  }

  // .ObsPipe.Proto.PixelFormat pixel_format = 8;
  if (this->pixel_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pixel_format());
  }

  // .ObsPipe.Proto.Compression compression = 9;
  if (this->compression() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_compression());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ObsPipe.Proto.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Frame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ObsPipe.Proto.Frame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ObsPipe.Proto.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ObsPipe.Proto.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buffer().size() > 0) {

    buffer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  if (from.has_rendered()) {
    _internal_mutable_rendered()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_rendered());
  }
  if (from.has_generated()) {
    _internal_mutable_generated()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_generated());
  }
  if (from.has_region()) {
    _internal_mutable_region()->::ObsPipe::Proto::Rectangle::MergeFrom(from._internal_region());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.bpp() != 0) {
    _internal_set_bpp(from._internal_bpp());
  }
  if (from.image_format() != 0) {
    _internal_set_image_format(from._internal_image_format());
  }
  if (from.pixel_format() != 0) {
    _internal_set_pixel_format(from._internal_pixel_format());
  }
  if (from.compression() != 0) {
    _internal_set_compression(from._internal_compression());
  }
}

void Frame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ObsPipe.Proto.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ObsPipe.Proto.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  buffer_.Swap(&other->buffer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rendered_, other->rendered_);
  swap(generated_, other->generated_);
  swap(region_, other->region_);
  swap(id_, other->id_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(bpp_, other->bpp_);
  swap(image_format_, other->image_format_);
  swap(pixel_format_, other->pixel_format_);
  swap(compression_, other->compression_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace ObsPipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ObsPipe::Proto::Rectangle* Arena::CreateMaybeMessage< ::ObsPipe::Proto::Rectangle >(Arena* arena) {
  return Arena::CreateInternal< ::ObsPipe::Proto::Rectangle >(arena);
}
template<> PROTOBUF_NOINLINE ::ObsPipe::Proto::Frame* Arena::CreateMaybeMessage< ::ObsPipe::Proto::Frame >(Arena* arena) {
  return Arena::CreateInternal< ::ObsPipe::Proto::Frame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
